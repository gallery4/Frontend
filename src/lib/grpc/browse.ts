// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "browse.proto" (package "browse", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Timestamp } from "./google/protobuf/timestamp";
/**
 * @generated from protobuf message browse.ListRequest
 */
export interface ListRequest {
    /**
     * @generated from protobuf field: string path = 1
     */
    path: string;
}
/**
 * @generated from protobuf message browse.ListResponseItem
 */
export interface ListResponseItem {
    /**
     * @generated from protobuf field: string name = 1
     */
    name: string;
    /**
     * @generated from protobuf field: google.protobuf.Timestamp dateTime = 2
     */
    dateTime?: Timestamp;
}
/**
 * @generated from protobuf message browse.ListResponse
 */
export interface ListResponse {
    /**
     * @generated from protobuf field: string path = 1
     */
    path: string;
    /**
     * @generated from protobuf field: repeated browse.ListResponseItem directories = 2
     */
    directories: ListResponseItem[];
    /**
     * @generated from protobuf field: repeated browse.ListResponseItem archives = 3
     */
    archives: ListResponseItem[];
    /**
     * @generated from protobuf field: repeated browse.ListResponseItem files = 4
     */
    files: ListResponseItem[];
}
// @generated message type with reflection information, may provide speed optimized methods
class ListRequest$Type extends MessageType<ListRequest> {
    constructor() {
        super("browse.ListRequest", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ListRequest>): ListRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<ListRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListRequest): ListRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message browse.ListRequest
 */
export const ListRequest = new ListRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListResponseItem$Type extends MessageType<ListResponseItem> {
    constructor() {
        super("browse.ListResponseItem", [
            { no: 1, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "dateTime", kind: "message", T: () => Timestamp }
        ]);
    }
    create(value?: PartialMessage<ListResponseItem>): ListResponseItem {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.name = "";
        if (value !== undefined)
            reflectionMergePartial<ListResponseItem>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListResponseItem): ListResponseItem {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string name */ 1:
                    message.name = reader.string();
                    break;
                case /* google.protobuf.Timestamp dateTime */ 2:
                    message.dateTime = Timestamp.internalBinaryRead(reader, reader.uint32(), options, message.dateTime);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListResponseItem, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string name = 1; */
        if (message.name !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.name);
        /* google.protobuf.Timestamp dateTime = 2; */
        if (message.dateTime)
            Timestamp.internalBinaryWrite(message.dateTime, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message browse.ListResponseItem
 */
export const ListResponseItem = new ListResponseItem$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ListResponse$Type extends MessageType<ListResponse> {
    constructor() {
        super("browse.ListResponse", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "directories", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ListResponseItem },
            { no: 3, name: "archives", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ListResponseItem },
            { no: 4, name: "files", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ListResponseItem }
        ]);
    }
    create(value?: PartialMessage<ListResponse>): ListResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        message.directories = [];
        message.archives = [];
        message.files = [];
        if (value !== undefined)
            reflectionMergePartial<ListResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ListResponse): ListResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* repeated browse.ListResponseItem directories */ 2:
                    message.directories.push(ListResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated browse.ListResponseItem archives */ 3:
                    message.archives.push(ListResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated browse.ListResponseItem files */ 4:
                    message.files.push(ListResponseItem.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ListResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* repeated browse.ListResponseItem directories = 2; */
        for (let i = 0; i < message.directories.length; i++)
            ListResponseItem.internalBinaryWrite(message.directories[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* repeated browse.ListResponseItem archives = 3; */
        for (let i = 0; i < message.archives.length; i++)
            ListResponseItem.internalBinaryWrite(message.archives[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated browse.ListResponseItem files = 4; */
        for (let i = 0; i < message.files.length; i++)
            ListResponseItem.internalBinaryWrite(message.files[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message browse.ListResponse
 */
export const ListResponse = new ListResponse$Type();
/**
 * @generated ServiceType for protobuf service browse.Browse
 */
export const Browse = new ServiceType("browse.Browse", [
    { name: "List", options: {}, I: ListRequest, O: ListResponse }
]);
