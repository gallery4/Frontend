/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: browse.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace browse {
    export class ListRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            path?: string;
        }): ListRequest {
            const message = new ListRequest({});
            if (data.path != null) {
                message.path = data.path;
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListRequest {
            return ListRequest.deserialize(bytes);
        }
    }
    export class ListResponseItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            dateTime?: dependency_1.google.protobuf.Timestamp;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("dateTime" in data && data.dateTime != undefined) {
                    this.dateTime = data.dateTime;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get dateTime() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 2) as dependency_1.google.protobuf.Timestamp;
        }
        set dateTime(value: dependency_1.google.protobuf.Timestamp) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_dateTime() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            name?: string;
            dateTime?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        }): ListResponseItem {
            const message = new ListResponseItem({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.dateTime != null) {
                message.dateTime = dependency_1.google.protobuf.Timestamp.fromObject(data.dateTime);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                dateTime?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.dateTime != null) {
                data.dateTime = this.dateTime.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_dateTime)
                writer.writeMessage(2, this.dateTime, () => this.dateTime.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListResponseItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListResponseItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.dateTime, () => message.dateTime = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListResponseItem {
            return ListResponseItem.deserialize(bytes);
        }
    }
    export class ListResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
            directories?: ListResponseItem[];
            archives?: ListResponseItem[];
            files?: ListResponseItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
                if ("directories" in data && data.directories != undefined) {
                    this.directories = data.directories;
                }
                if ("archives" in data && data.archives != undefined) {
                    this.archives = data.archives;
                }
                if ("files" in data && data.files != undefined) {
                    this.files = data.files;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get directories() {
            return pb_1.Message.getRepeatedWrapperField(this, ListResponseItem, 2) as ListResponseItem[];
        }
        set directories(value: ListResponseItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get archives() {
            return pb_1.Message.getRepeatedWrapperField(this, ListResponseItem, 3) as ListResponseItem[];
        }
        set archives(value: ListResponseItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get files() {
            return pb_1.Message.getRepeatedWrapperField(this, ListResponseItem, 4) as ListResponseItem[];
        }
        set files(value: ListResponseItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            path?: string;
            directories?: ReturnType<typeof ListResponseItem.prototype.toObject>[];
            archives?: ReturnType<typeof ListResponseItem.prototype.toObject>[];
            files?: ReturnType<typeof ListResponseItem.prototype.toObject>[];
        }): ListResponse {
            const message = new ListResponse({});
            if (data.path != null) {
                message.path = data.path;
            }
            if (data.directories != null) {
                message.directories = data.directories.map(item => ListResponseItem.fromObject(item));
            }
            if (data.archives != null) {
                message.archives = data.archives.map(item => ListResponseItem.fromObject(item));
            }
            if (data.files != null) {
                message.files = data.files.map(item => ListResponseItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
                directories?: ReturnType<typeof ListResponseItem.prototype.toObject>[];
                archives?: ReturnType<typeof ListResponseItem.prototype.toObject>[];
                files?: ReturnType<typeof ListResponseItem.prototype.toObject>[];
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            if (this.directories != null) {
                data.directories = this.directories.map((item: ListResponseItem) => item.toObject());
            }
            if (this.archives != null) {
                data.archives = this.archives.map((item: ListResponseItem) => item.toObject());
            }
            if (this.files != null) {
                data.files = this.files.map((item: ListResponseItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (this.directories.length)
                writer.writeRepeatedMessage(2, this.directories, (item: ListResponseItem) => item.serialize(writer));
            if (this.archives.length)
                writer.writeRepeatedMessage(3, this.archives, (item: ListResponseItem) => item.serialize(writer));
            if (this.files.length)
                writer.writeRepeatedMessage(4, this.files, (item: ListResponseItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.directories, () => pb_1.Message.addToRepeatedWrapperField(message, 2, ListResponseItem.deserialize(reader), ListResponseItem));
                        break;
                    case 3:
                        reader.readMessage(message.archives, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ListResponseItem.deserialize(reader), ListResponseItem));
                        break;
                    case 4:
                        reader.readMessage(message.files, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ListResponseItem.deserialize(reader), ListResponseItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ListResponse {
            return ListResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedBrowseService {
        static definition = {
            List: {
                path: "/browse.Browse/List",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: ListRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => ListRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: ListResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => ListResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract List(call: grpc_1.ServerUnaryCall<ListRequest, ListResponse>, callback: grpc_1.sendUnaryData<ListResponse>): void;
    }
    export class BrowseClient extends grpc_1.makeGenericClientConstructor(UnimplementedBrowseService.definition, "Browse", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        List: GrpcUnaryServiceInterface<ListRequest, ListResponse> = (message: ListRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ListResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ListResponse>, callback?: grpc_1.requestCallback<ListResponse>): grpc_1.ClientUnaryCall => {
            return super.List(message, metadata, options, callback);
        };
    }
}
