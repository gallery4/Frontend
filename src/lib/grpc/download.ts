/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.29.3
 * source: download.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace download {
    export class GetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            path?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("path" in data && data.path != undefined) {
                    this.path = data.path;
                }
            }
        }
        get path() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set path(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            path?: string;
        }): GetRequest {
            const message = new GetRequest({});
            if (data.path != null) {
                message.path = data.path;
            }
            return message;
        }
        toObject() {
            const data: {
                path?: string;
            } = {};
            if (this.path != null) {
                data.path = this.path;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.path.length)
                writer.writeString(1, this.path);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.path = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GetRequest {
            return GetRequest.deserialize(bytes);
        }
    }
    export class DownloadStreamResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            Filename?: string;
            Data?: Uint8Array;
            Size?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("Filename" in data && data.Filename != undefined) {
                    this.Filename = data.Filename;
                }
                if ("Data" in data && data.Data != undefined) {
                    this.Data = data.Data;
                }
                if ("Size" in data && data.Size != undefined) {
                    this.Size = data.Size;
                }
            }
        }
        get Filename() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set Filename(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get Data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
        }
        set Data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get Size() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set Size(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            Filename?: string;
            Data?: Uint8Array;
            Size?: number;
        }): DownloadStreamResponse {
            const message = new DownloadStreamResponse({});
            if (data.Filename != null) {
                message.Filename = data.Filename;
            }
            if (data.Data != null) {
                message.Data = data.Data;
            }
            if (data.Size != null) {
                message.Size = data.Size;
            }
            return message;
        }
        toObject() {
            const data: {
                Filename?: string;
                Data?: Uint8Array;
                Size?: number;
            } = {};
            if (this.Filename != null) {
                data.Filename = this.Filename;
            }
            if (this.Data != null) {
                data.Data = this.Data;
            }
            if (this.Size != null) {
                data.Size = this.Size;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.Filename.length)
                writer.writeString(1, this.Filename);
            if (this.Data.length)
                writer.writeBytes(2, this.Data);
            if (this.Size != 0)
                writer.writeInt32(3, this.Size);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DownloadStreamResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DownloadStreamResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.Filename = reader.readString();
                        break;
                    case 2:
                        message.Data = reader.readBytes();
                        break;
                    case 3:
                        message.Size = reader.readInt32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): DownloadStreamResponse {
            return DownloadStreamResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedDownloadService {
        static definition = {
            Get: {
                path: "/download.Download/Get",
                requestStream: false,
                responseStream: true,
                requestSerialize: (message: GetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => GetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: DownloadStreamResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => DownloadStreamResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Get(call: grpc_1.ServerWritableStream<GetRequest, DownloadStreamResponse>): void;
    }
    export class DownloadClient extends grpc_1.makeGenericClientConstructor(UnimplementedDownloadService.definition, "Download", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Get: GrpcStreamServiceInterface<GetRequest, DownloadStreamResponse> = (message: GetRequest, metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<DownloadStreamResponse> => {
            return super.Get(message, metadata, options);
        };
    }
}
