// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "download.proto" (package "download", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message download.GetRequest
 */
export interface GetRequest {
    /**
     * @generated from protobuf field: string path = 1
     */
    path: string;
}
/**
 * @generated from protobuf message download.DownloadStreamResponse
 */
export interface DownloadStreamResponse {
    /**
     * @generated from protobuf field: string Filename = 1
     */
    filename: string;
    /**
     * @generated from protobuf field: bytes Data = 2
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: int32 Size = 3
     */
    size: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetRequest$Type extends MessageType<GetRequest> {
    constructor() {
        super("download.GetRequest", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetRequest>): GetRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<GetRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetRequest): GetRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message download.GetRequest
 */
export const GetRequest = new GetRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DownloadStreamResponse$Type extends MessageType<DownloadStreamResponse> {
    constructor() {
        super("download.DownloadStreamResponse", [
            { no: 1, name: "Filename", kind: "scalar", jsonName: "Filename", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "Data", kind: "scalar", jsonName: "Data", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "Size", kind: "scalar", jsonName: "Size", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DownloadStreamResponse>): DownloadStreamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filename = "";
        message.data = new Uint8Array(0);
        message.size = 0;
        if (value !== undefined)
            reflectionMergePartial<DownloadStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DownloadStreamResponse): DownloadStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Filename */ 1:
                    message.filename = reader.string();
                    break;
                case /* bytes Data */ 2:
                    message.data = reader.bytes();
                    break;
                case /* int32 Size */ 3:
                    message.size = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DownloadStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Filename = 1; */
        if (message.filename !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filename);
        /* bytes Data = 2; */
        if (message.data.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.data);
        /* int32 Size = 3; */
        if (message.size !== 0)
            writer.tag(3, WireType.Varint).int32(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message download.DownloadStreamResponse
 */
export const DownloadStreamResponse = new DownloadStreamResponse$Type();
/**
 * @generated ServiceType for protobuf service download.Download
 */
export const Download = new ServiceType("download.Download", [
    { name: "Get", serverStreaming: true, options: {}, I: GetRequest, O: DownloadStreamResponse }
]);
