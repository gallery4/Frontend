// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "image.proto" (package "image", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Image } from "./image";
import type { ViewRequest } from "./image";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { ImageStreamResponse } from "./image";
import type { ThumbnailRequest } from "./image";
import type { ServerStreamingCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service image.Image
 */
export interface IImageClient {
    /**
     * @generated from protobuf rpc: Thumbnail
     */
    thumbnail(input: ThumbnailRequest, options?: RpcOptions): ServerStreamingCall<ThumbnailRequest, ImageStreamResponse>;
    /**
     * @generated from protobuf rpc: View
     */
    view(input: ViewRequest, options?: RpcOptions): ServerStreamingCall<ViewRequest, ImageStreamResponse>;
}
/**
 * @generated from protobuf service image.Image
 */
export class ImageClient implements IImageClient, ServiceInfo {
    typeName = Image.typeName;
    methods = Image.methods;
    options = Image.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: Thumbnail
     */
    thumbnail(input: ThumbnailRequest, options?: RpcOptions): ServerStreamingCall<ThumbnailRequest, ImageStreamResponse> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<ThumbnailRequest, ImageStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: View
     */
    view(input: ViewRequest, options?: RpcOptions): ServerStreamingCall<ViewRequest, ImageStreamResponse> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<ViewRequest, ImageStreamResponse>("serverStreaming", this._transport, method, opt, input);
    }
}
