// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "image.proto" (package "image", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ListType } from "./types";
/**
 * @generated from protobuf message image.ThumbnailRequest
 */
export interface ThumbnailRequest {
    /**
     * @generated from protobuf field: string path = 1
     */
    path: string;
    /**
     * @generated from protobuf field: types.ListType listType = 2
     */
    listType: ListType;
    /**
     * @generated from protobuf field: optional int32 width = 3
     */
    width?: number;
    /**
     * @generated from protobuf field: optional int32 height = 4
     */
    height?: number;
}
/**
 * @generated from protobuf message image.ViewRequest
 */
export interface ViewRequest {
    /**
     * @generated from protobuf field: string path = 1
     */
    path: string;
}
/**
 * @generated from protobuf message image.ImageStreamResponse
 */
export interface ImageStreamResponse {
    /**
     * @generated from protobuf field: string Filename = 1
     */
    filename: string;
    /**
     * @generated from protobuf field: string ContentType = 2
     */
    contentType: string;
    /**
     * @generated from protobuf field: bytes Data = 3
     */
    data: Uint8Array;
    /**
     * @generated from protobuf field: int32 Size = 4
     */
    size: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ThumbnailRequest$Type extends MessageType<ThumbnailRequest> {
    constructor() {
        super("image.ThumbnailRequest", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "listType", kind: "enum", T: () => ["types.ListType", ListType, "LIST_TYPE_"] },
            { no: 3, name: "width", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "height", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ThumbnailRequest>): ThumbnailRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        message.listType = 0;
        if (value !== undefined)
            reflectionMergePartial<ThumbnailRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ThumbnailRequest): ThumbnailRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                case /* types.ListType listType */ 2:
                    message.listType = reader.int32();
                    break;
                case /* optional int32 width */ 3:
                    message.width = reader.int32();
                    break;
                case /* optional int32 height */ 4:
                    message.height = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ThumbnailRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        /* types.ListType listType = 2; */
        if (message.listType !== 0)
            writer.tag(2, WireType.Varint).int32(message.listType);
        /* optional int32 width = 3; */
        if (message.width !== undefined)
            writer.tag(3, WireType.Varint).int32(message.width);
        /* optional int32 height = 4; */
        if (message.height !== undefined)
            writer.tag(4, WireType.Varint).int32(message.height);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message image.ThumbnailRequest
 */
export const ThumbnailRequest = new ThumbnailRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewRequest$Type extends MessageType<ViewRequest> {
    constructor() {
        super("image.ViewRequest", [
            { no: 1, name: "path", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ViewRequest>): ViewRequest {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.path = "";
        if (value !== undefined)
            reflectionMergePartial<ViewRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ViewRequest): ViewRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string path */ 1:
                    message.path = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ViewRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string path = 1; */
        if (message.path !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.path);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message image.ViewRequest
 */
export const ViewRequest = new ViewRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ImageStreamResponse$Type extends MessageType<ImageStreamResponse> {
    constructor() {
        super("image.ImageStreamResponse", [
            { no: 1, name: "Filename", kind: "scalar", jsonName: "Filename", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "ContentType", kind: "scalar", jsonName: "ContentType", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "Data", kind: "scalar", jsonName: "Data", T: 12 /*ScalarType.BYTES*/ },
            { no: 4, name: "Size", kind: "scalar", jsonName: "Size", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ImageStreamResponse>): ImageStreamResponse {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.filename = "";
        message.contentType = "";
        message.data = new Uint8Array(0);
        message.size = 0;
        if (value !== undefined)
            reflectionMergePartial<ImageStreamResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ImageStreamResponse): ImageStreamResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string Filename */ 1:
                    message.filename = reader.string();
                    break;
                case /* string ContentType */ 2:
                    message.contentType = reader.string();
                    break;
                case /* bytes Data */ 3:
                    message.data = reader.bytes();
                    break;
                case /* int32 Size */ 4:
                    message.size = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ImageStreamResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string Filename = 1; */
        if (message.filename !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.filename);
        /* string ContentType = 2; */
        if (message.contentType !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.contentType);
        /* bytes Data = 3; */
        if (message.data.length)
            writer.tag(3, WireType.LengthDelimited).bytes(message.data);
        /* int32 Size = 4; */
        if (message.size !== 0)
            writer.tag(4, WireType.Varint).int32(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message image.ImageStreamResponse
 */
export const ImageStreamResponse = new ImageStreamResponse$Type();
/**
 * @generated ServiceType for protobuf service image.Image
 */
export const Image = new ServiceType("image.Image", [
    { name: "Thumbnail", serverStreaming: true, options: {}, I: ThumbnailRequest, O: ImageStreamResponse },
    { name: "View", serverStreaming: true, options: {}, I: ViewRequest, O: ImageStreamResponse }
]);
